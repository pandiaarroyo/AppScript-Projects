{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "// @ts-nocheck\nconst hojasPermitidas = [\"Env√≠oAsignaci√≥n\", \"Env√≠oAsignaci√≥n2\", \"Env√≠oAsignaci√≥n3\"];\n\nfunction onOpen() {\n  const ui = SpreadsheetApp.getUi();\n  ui.createMenu(\"Asignaci√≥n\")\n    .addItem(\"üìß Enviar Correo\", \"enviarCorreoAsignacion\")\n    .addItem(\"üöÆ Limpiar\", \"limpiarAsignacion\")\n    .addToUi();\n}\n\nfunction onEdit(e) {\n const ss = e.source;\n const hoja = ss.getActiveSheet();\n if (!hojasPermitidas.includes(hoja.getName())) return;\n\n  // üîπ 1) Limpiar saltos de l√≠nea en lo pegado\n  let valor = e.range.getValue();\n  if (typeof valor === \"string\") {\n    valor = valor.replace(/\\r?\\n|\\r/g, \" \");\n    e.range.setValue(valor);\n  }\n\n  const lastRow = hoja.getLastRow();\n\n  // üîπ 2) Aplicar formato general (EXCLUYE encabezado para no perder estilos)\n  if (lastRow > 1) {\n    const rango = hoja.getRange(\"A2:AX\" + lastRow);\n    rango.setFontFamily(\"Calibri\")\n         .setFontSize(12)\n         .setHorizontalAlignment(\"center\")\n         .setVerticalAlignment(\"middle\")\n         .setWrap(true)\n         .setFontColor(\"black\")\n         .setFontWeight(\"normal\")\n         .setBackground(null);\n  }\n\n  // üîπ 3) Recalcular SI/NO/BLANCO de fotos en AX\n  const hojaLista = ss.getSheetByName(\"Lista\");\n  if (!hojaLista) return;\n\n  const clientesLista = hojaLista.getRange(\"A2:A\" + hojaLista.getLastRow())\n    .getValues().flat().filter(x => x);\n\n  const clientes = hoja.getRange(2, 3, lastRow - 1).getValues().flat(); // col C\n  const resultados = clientes.map(c => {\n    if (!c) return [\"\"]; // vac√≠o ‚Üí nada en AX\n    if (clientesLista.includes(c)) return [\"SI\"];\n    return [\"NO\"];\n  });\n  if (resultados.length > 0) {\n    hoja.getRange(2, 50, resultados.length).setValues(resultados); // col AX\n  }\n\n  // üîπ 4) Formatos especiales\n  if (lastRow > 1) {\n    const rangoAA = hoja.getRange(2, 27, lastRow - 1); // Cita Retiro\n    const rangoAF = hoja.getRange(2, 32, lastRow - 1); // Posicionamiento\n    const rangoAX = hoja.getRange(2, 50, lastRow - 1); // Fotos\n    const rangoQ = hoja.getRange(2, 17, lastRow - 1); // Gasificado\n\n    // AA ‚Üí fondo azul\n    rangoAA.setBackground(\"#9fc5e8\").setFontWeight(\"bold\");\n    \n    // AF ‚Üí fondo amarillo\n    rangoAF.setBackground(\"#ffe599\").setFontWeight(\"bold\");\n    \n    rangoQ.setBackground ( \"#FF0000\").setFontWeight(\"bold\");\n\n    // AX ‚Üí SI/NO colores\n    const valoresAX = rangoAX.getValues();\n    valoresAX.forEach((fila, i) => {\n      const celda = rangoAX.getCell(i + 1, 1);\n      if (fila[0] === \"SI\") {\n        celda.setBackground(\"#c6efce\")\n             .setFontColor(\"#0d6a0e\")\n             .setFontWeight(\"bold\");\n      } else if (fila[0] === \"NO\") {\n        celda.setBackground(\"#ffc7ce\")\n             .setFontColor(\"#a20c13\")\n             .setFontWeight(\"bold\");\n      } else {\n        celda.setBackground(null).setFontColor(\"black\").setFontWeight(\"normal\"); // vac√≠o\n      }\n    });\n  }\n\n  // üîπ 5) Encabezado fijo (A1:AX1)\n  const encabezado = hoja.getRange(\"A1:AX1\");\n  encabezado.setBackground(\"#00499b\")\n            .setFontColor(\"white\")\n            .setFontWeight(\"bold\")\n            .setFontFamily(\"Calibri\")\n            .setFontSize(12)\n            .setHorizontalAlignment(\"center\")\n            .setVerticalAlignment(\"middle\");\n\n  // üîπ 6) Dibujar bordes en TODAS las filas seg√∫n C o G\n  if (lastRow > 1) {\n    const valoresC = hoja.getRange(2, 3, lastRow - 1).getValues().flat(); // col C\n    const valoresG = hoja.getRange(2, 7, lastRow - 1).getValues().flat(); // col G\n\n    for (let i = 0; i < lastRow - 1; i++) {\n      const fila = i + 2; // empieza en fila 2\n      const rangoFila = hoja.getRange(fila, 1, 1, hoja.getLastColumn());\n\n      if (valoresC[i] || valoresG[i]) {\n        rangoFila.setBorder(true, true, true, true, true, true, \"#555555\", SpreadsheetApp.BorderStyle.SOLID_MEDIUM);\n      } else {\n        rangoFila.setBorder(false, false, false, false, false, false);\n      }\n    }\n  }\n}\n\nfunction enviarCorreoAsignacion() {\n const ss = SpreadsheetApp.getActiveSpreadsheet();\n const hoja = ss.getActiveSheet();\n if (!hojasPermitidas.includes(hoja.getName())) {\n  SpreadsheetApp.getUi().alert(\"Esta herramienta solo funciona en las hojas permitidas.\");\n  return;\n }\n\n  const hojaDestinatarios = ss.getSheetByName(\"Destinatarios\");\n  const hojaConfig = ss.getSheetByName(\"Configuraci√≥n\");\n\n  const transportistaRaw = hoja.getRange(\"V2\").getValue();\n  const valorFecha = hoja.getRange(\"AF2\").getValue();\n\n  if (!transportistaRaw || !valorFecha) {\n    SpreadsheetApp.getUi().alert(\"Faltan datos: Transportista o Fecha de posicionamiento.\");\n    return;\n  }\n\n  let fecha = valorFecha instanceof Date ? valorFecha : null;\n  if (!fecha) {\n    SpreadsheetApp.getUi().alert(\"La fecha de cita de retiro no es v√°lida.\");\n    return;\n  }\n\n  // ‚úÖ Quitar RUC al transportista (cualquier n√∫mero al final)\n  const transportista = String(transportistaRaw).replace(/\\s+\\d+$/, \"\");\n\n  // ‚úÖ Validar puerto (columna F)\n  const lastRow = hoja.getLastRow();\n  const puertos = hoja.getRange(2, 6, lastRow - 1).getValues().flat().filter(x => x);\n  const puertoUnico = [...new Set(puertos)];\n\n  if (puertoUnico.length !== 1) {\n    SpreadsheetApp.getUi().alert(\"Los servicios tienen diferentes puertos en columna F. Deben ser todos iguales.\");\n    return;\n  }\n  const puerto = puertoUnico[0].toString().toUpperCase(); // Ej: CALLAO, CHANCAY, PISCO\n\n  // Buscar correos de destinatarios\n  const listaDest = hojaDestinatarios.getDataRange().getValues();\n  const destinatarios = listaDest.find(row => row[0] === transportistaRaw)?.[1];\n  if (!destinatarios) {\n    SpreadsheetApp.getUi().alert(\"No se encontraron correos para el transportista.\");\n    return;\n  }\n\n  // Fecha en texto\n  const dias = [\"Domingo\",\"Lunes\",\"Martes\",\"Mi√©rcoles\",\"Jueves\",\"Viernes\",\"S√°bado\"];\n  const meses = [\"Enero\",\"Febrero\",\"Marzo\",\"Abril\",\"Mayo\",\"Junio\",\"Julio\",\"Agosto\",\"Septiembre\",\"Octubre\",\"Noviembre\",\"Diciembre\"];\n  const fechaTexto = ${dias[fecha.getDay()]} ${fecha.getDate()} de ${meses[fecha.getMonth()]};\n\n  // Validar remitente\n  const correoUsuario = Session.getActiveUser().getEmail();\n  const dataConfig = hojaConfig.getRange(\"A2:E\").getValues();\n  const filaRemitente = dataConfig.find(row => row[0] === correoUsuario);\n  if (!filaRemitente) {\n    SpreadsheetApp.getUi().alert(\"No est√°s autorizado a enviar este correo.\");\n    return;\n  }\n  const [_, nombre, puesto, telefono, correo] = filaRemitente;\n\n  // üîπ Columnas que se enviar√°n (con AA colocado despu√©s de H Contenedor)\n  const columnas = [\n    {letra:\"C\", idx:2},   // Cliente\n    {letra:\"E\", idx:4},   // Producto\n    {letra:\"F\", idx:5},   // Puerto Embarque\n    {letra:\"G\", idx:6},   // Booking\n    {letra:\"H\", idx:7},   // Contenedor\n    {letra:\"AA\", idx:26}, // Cita Retiro (se muestra aqu√≠)\n    {letra:\"I\", idx:8},   // Nave\n    {letra:\"O\", idx:14},  // ColdTreatment\n    {letra:\"Q\", idx:16},  // Gasificado\n    {letra:\"S\", idx:18},  // Pre enfriado\n    {letra:\"V\", idx:21},  // Transp. Due√±o\n    {letra:\"W\", idx:22},  // Tracto\n    {letra:\"X\", idx:23},  // Carreta\n    {letra:\"Y\", idx:24},  // Chofer\n    {letra:\"Z\", idx:25},  // Deposito Retiro\n    {letra:\"AF\", idx:31}, // Posicionamiento\n    {letra:\"AH\", idx:33}, // Planta\n    {letra:\"AO\", idx:40}, // Deposito Retorno\n    {letra:\"AT\", idx:45}, // Zona\n    {letra:\"AX\", idx:49}  // Fotos (SI/NO)\n  ];\n\n  // Encabezado\n  const encabezado = columnas.map(c => hoja.getRange(1, c.idx+1).getValue());\n\n  // Datos\n  const datos = hoja.getRange(2,1,lastRow-1,50).getValues()\n    .filter(row => row.some(celda => celda !== \"\" && celda !== null));\n\n  // Construir tabla HTML\n  let html = <table border='1' cellpadding='5' style='border-collapse:collapse; font-family:Calibri; font-size:12px; text-align:center;'>;\n  html += <tr style='background:#00499b; color:white; font-weight:bold;'>;\n  encabezado.forEach(t => html += <th>${t}</th>);\n  html += </tr>;\n\n  datos.forEach(row => {\n    html += <tr>;\n    columnas.forEach((col) => {\n      let valor = row[col.idx];\n      let estilo = \"color:#003366; font-size:12px; font-family:Calibri;\";\n\n      if (valor instanceof Date) valor = formatearFecha(valor);\n\n      if (col.letra === \"AA\") {\n        estilo += \"font-weight:bold;background:#9fc5e8;\";\n      } else if (col.letra === \"AF\") {\n        estilo += \"font-weight:bold;background:#ffe599;\";\n        } else if (col.letra === \"Q\"){\n\t\t    estilo += \"font-weight:bold;background:#FF0000;\";\n      } else if (col.letra === \"AX\") {\n        if (valor === \"SI\") {\n          estilo += \"font-weight:bold;background:#c6efce;color:#0d6a0e;\";\n        } else if (valor === \"NO\") {\n          estilo += \"font-weight:bold;background:#ffc7ce;color:#a20c13;\";\n        }\n      }\n\n      html += <td style='${estilo}'>${valor ?? \"\"}</td>;\n    });\n    html += </tr>;\n  });\n  html += </table>;\n\n  // Cuerpo del correo con logo antes de la firma (igual al tuyo)\n  const cuerpo = `\n  <div style=\"font-family:Calibri; font-size:14px;\">\n<p>Estimados,</p>\n    <p>Les adjunto la programaci√≥n detallada para el d√≠a <b>${fechaTexto}</b>.</p>\n    <p>Por favor, tomen en cuenta la hora de cita de retiro, la cual est√° resaltada en amarillo. Es importante que env√≠en los datos de la unidad asignada para cada servicio.</p>\n    <p>Si necesitan realizar alg√∫n cambio operativo (como cambio de tracto, carreta o conductor), les pedimos que lo informen por este medio y tambi√©n en el grupo de WhatsApp, haciendo referencia a la reserva o Booking correspondiente.</p>\n    <p>Adicionalmente, les pido que consideren las siguientes observaciones al momento de realizar el servicio:</p>\n    <ul>\n      <li><b>Horas de cita sugerida:</b> Brindar las horas de citas full lo m√°s pronto posible, a fin de gestionar citas con anticipaci√≥n y no incurrir en sobrecostos. New Transport no se hace responsable de alg√∫n sobrecosto de no tener la informaci√≥n a su debido momento.</li>\n      <li><b>Informar retrasos:</b> En caso de demoras o retrasos, es fundamental que informen la hora estimada de llegada a la planta.</li>\n      <li><span style=\"background-color: #a9f9ff;\"><b>Servicios congelados:</b> Los servicios de productos congelados deben llegar pre-enfriados. Para ello, env√≠en fotos del encendido del equipo 2 horas antes del posicionamiento y tambi√©n a su llegada a la planta.</span></li>\n      <li><b>Gasificado/Sini/Controlador:</b> Se les informar√° si aplica y siempre revisen el control de embarque donde se indicar√° con un sello.</li>\n      <li><b>Bolsas de seguridad:</b> Es crucial que las bolsas de seguridad no sean abiertas hasta su entrega en planta.</li>\n      <li><b>Fotos de precintado y gu√≠as:</b> Por favor, env√≠en fotos del precintado, GRR, GRT antes de salir de planta y esperar nuestra confirmaci√≥n para iniciar ruta a puerto. Recordar que la unidad no puede salir de planta sin el canal correspondiente.</li>\n      <li><span style=\"background-color: #ffffa7;\"><b>Reporte de GPS:</b> Es indispensable enviar un reporte de GPS, monitoreo e incidencias cada 2 horas desde el inicio hasta la finalizaci√≥n del servicio. La falta de reportes con horarios detallados implicar√° que no se asumir√° sobrestad√≠a en caso de demoras en planta, retiros o entregas full.</span></li>\n    </ul>\n    <p>El cumplimiento de estas observaciones nos ayudar√° a evitar sobrecostos y afectaciones en el servicio.</p>\n    <br>${html}<br><br>\n    <div>\n      <img src=\"http://www.newtransport.net/img/logo.png\" height=\"80\"><br><br>\n      <b>${nombre}</b><br>\n      ${puesto}<br>\n      New Transport S.A.<br>\n      Tel√©fono: ${telefono}<br>\n      ${correo}<br>\n      www.newtransport.net\n    </div>\n  </div>`;\n\n  // ‚úÖ Asunto con puerto din√°mico y transportista sin RUC, todo en may√∫sculas\n  const asunto = EMBARQUES POR ${puerto} || PROGRAMACION ${fechaTexto} - ${transportista} || FLOTA NT.toUpperCase();\n\n  GmailApp.sendEmail(destinatarios, asunto, \"\", { htmlBody: cuerpo });\n  SpreadsheetApp.getUi().alert(\"Correo enviado correctamente.\");\n}\n\nfunction formatearFecha(fecha) {\n  if (!fecha || !(fecha instanceof Date)) return fecha || \"\";\n  return Utilities.formatDate(fecha, Session.getScriptTimeZone(), \"dd/MM/yyyy HH:mm\");\n}\n\nfunction limpiarAsignacion() {\n const ss = SpreadsheetApp.getActiveSpreadsheet();\n const hoja = ss.getActiveSheet();\n\n if (!hojasPermitidas.includes(hoja.getName())) {\n  SpreadsheetApp.getUi().alert(\"Esta opci√≥n solo funciona en las hojas permitidas.\");\n  return;\n }\n\n  const lastRow = hoja.getLastRow();\n  if (lastRow <= 1) return;\n\n  hoja.getRange(2, 1, lastRow - 1, hoja.getLastColumn()).clearContent().clearFormat();\n\n  //SpreadsheetApp.getUi().alert(\"Se limpiaron los datos correctamente.\");",
      "status": "",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/scribbler",
  "run_on_load": false
}